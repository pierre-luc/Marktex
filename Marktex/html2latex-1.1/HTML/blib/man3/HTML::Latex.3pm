.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Latex 3pm"
.TH Latex 3pm "2014-09-19" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::Latex \- Creates a Latex file from an HTML file.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use HTML::Latex
\&
\& my $parser = new HTML::Latex($conffile);
\& $parser\->set_option(\e%options);
\& $parser\->add_package(@packages);
\& $parser\->ban_tag(@banned);
\& $parser\->set_log($logfile);
\&
\& # Option 1:
\& foreach my $uri (@ARGV) {
\&    my ($htmlfile,$latexfile) = $parser\->html2latex($uri);
\& }
\&
\& # Option 2:
\& foreach my $uri (@ARGV) {
\&    my $in = IO::File\->new("< $uri");
\&    my $out = IO::File\->new("> $uri.tex");
\&    $parser\->html2latex($in,$out);
\& }
\&
\& # Option 3:
\& my $html_string = join("\en",<>);
\& my $tex_string = $parser\->parse_string($html_string,1);
\&
\& # Option 4:
\& my $html_string = join("",@ARGV);
\& my $tex_string = $parser\->parse_string($html_string);
.Ve
.PP
print \f(CW$tex_string\fR;
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is used to create a text file in Latex format from a file
in \s-1HTML\s0 format.  Use the class as follows:
.PP
1. Create a new HTML::Latex object.
.PP
2. Override any options using \fIset_option()\fR, \fIadd_package()\fR, \fIban_tag()\fR, or \fIset_log()\fR.
.PP
3. Run \fIhtml2latex()\fR on a file or \s-1URL\s0.
.PP
4. Do whatever you want with the filename that was returned.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "\fB\fB$p\fB = HTML::Latex\->new($conffile)\fR" 4
.el .IP "\fB\f(CB$p\fB = HTML::Latex\->new($conffile)\fR" 4
.IX Item "$p = HTML::Latex->new($conffile)"
Creates a new HTML::Latex object.  It parses the configuation file
\&\f(CW$conffile\fR to set attributes.  The format of that file can be found in
the \s-1CONFIGURATION\s0 \s-1FILE\s0 section.
.Sp
Example:
.Sp
.Vb 1
\&    my $parser = HTML::Latex\->new();
.Ve
.ie n .IP "\fB($htmlfile,$latexfile) = \fB$p\fB\->html2latex($in,$out)\fR" 4
.el .IP "\fB($htmlfile,$latexfile) = \f(CB$p\fB\->html2latex($in,$out)\fR" 4
.IX Item "($htmlfile,$latexfile) = $p->html2latex($in,$out)"
\&\f(CW$in\fR is any \s-1URL\s0 or filename or FileHandle.  If it is a \s-1URL\s0, it is
mirrored locally.  The local location is returned as \f(CW$htmlfile\fR.  The
method produces a Latex file \f(CW$latexfile\fR.
.Sp
Locally mirrored files are all stored in the \*(L"store\*(R" directory which
can be set with either \fIset_option()\fR or in the configuration file.  See
\&\fBstore\fR under the \s-1OPTIONS\s0 section for more details.
.Sp
A mirrored file will automatically be re-downloaded when the \s-1URL\s0 is
updated.  If it has not been updated, \fIhtml2latex()\fR will use the local
file only.
.Sp
Also, \fIhtml2latex()\fR defaults to index.html when a file is not given.
For instance, if you used \f(CW\*(C`html2latex(http://slashdot.org)\*(C'\fR, then the
url http://slashdot.org/index.html would be used.
.Sp
Example:
.Sp
.Vb 2
\&    my($htmlfile,$latexfile) =
\&       $parser\->html2latex(\*(Aqreport01.html\*(Aq);
.Ve
.ie n .IP "\fB\fB$tex_string\fB = \f(BI$p\fB\->parse_string($html_string [,$full])\fR" 4
.el .IP "\fB\f(CB$tex_string\fB = \f(CB$p\fB\->parse_string($html_string [,$full])\fR" 4
.IX Item "$tex_string = $p->parse_string($html_string [,$full])"
\&\f(CW$html_string\fR is an \s-1HTML\s0 string.  \f(CW$tex_string\fR is a LaTeX string.  If
\&\f(CW$full\fR is 0, then any <\s-1HTML\s0> and <\s-1BODY\s0> tags are ignored, and the
string is just plain tex.  If \f(CW$full\fR is 1, then <\s-1HTML\s0> and <\s-1BODY\s0> tags
are implicitly added.  Basically, it's a choice as to whether or not
\&\f(CW$tex_string\fR has a LaTeX preamble in it.
.ie n .IP "\fBmy \fB@old_values\fB = \f(BI$p\fB\->set_option(\e%options)\fR" 4
.el .IP "\fBmy \f(CB@old_values\fB = \f(CB$p\fB\->set_option(\e%options)\fR" 4
.IX Item "my @old_values = $p->set_option(%options)"
Sets on option.  For a description of options, see the \s-1OPTION\s0 section
below.  Returns an list of all the old values based on the keys of
\&\f(CW%options\fR.
.Sp
Example:
.Sp
.Vb 1
\&    $parser\->set_option({border => 0, debug => 1});
.Ve
.ie n .IP "\fB\fB$p\fB\->add_package(@packages)\fR" 4
.el .IP "\fB\f(CB$p\fB\->add_package(@packages)\fR" 4
.IX Item "$p->add_package(@packages)"
Adds packages to the list used by \eusepackage{} in Latex.  The
defaults are fullpage, graphicx, and url.
.Sp
Example:
.Sp
.Vb 1
\&    $parser\->add_package(\*(Aqdoublespace\*(Aq);
.Ve
.ie n .IP "\fB\fB$p\fB\->add_head(@heads)\fR" 4
.el .IP "\fB\f(CB$p\fB\->add_head(@heads)\fR" 4
.IX Item "$p->add_head(@heads)"
Adds options to the list used by \edocumentclass[\s-1OPTIONS\s0]{article} in
Latex.  Font is automatically put there, so don't put it there
yourself.
.Sp
Example:
.Sp
.Vb 1
\&    $parser\->add_head(\*(Aqtwocolumn\*(Aq);
.Ve
.ie n .IP "\fB\fB$p\fB\->ban_tag(@banned)\fR" 4
.el .IP "\fB\f(CB$p\fB\->ban_tag(@banned)\fR" 4
.IX Item "$p->ban_tag(@banned)"
Add \f(CW@banned\fR to the list of tags that \fIhtml2latex()\fR will ignore.  This
overrides tag definitions in the configuration file. By default, the
<\s-1CODE\s0> tag is banned.  That is because some people were using
<\s-1PRE\s0><\s-1CODE\s0></CODE></PRE>, which can be really bad if both are parsed.
.Sp
Example:
.Sp
.Vb 1
\&    $parser\->ban_tag(\*(Aqcode\*(Aq);
.Ve
.ie n .IP "\fBmy \fB$filehandle\fB = \f(BI$p\fB\->set_log($logfile)\fR" 4
.el .IP "\fBmy \f(CB$filehandle\fB = \f(CB$p\fB\->set_log($logfile)\fR" 4
.IX Item "my $filehandle = $p->set_log($logfile)"
Have errors and messages printed to the filename or FileHandle or
IO::File \f(CW$logfile\fR.  By default, things are printed to \s-1STDERR\s0.
\&\fIset_log()\fR returns the FileHandle of the log file.
.Sp
Example:
.Sp
.Vb 1
\&    my $filehandle = $parser\->set_log(\*(Aqreport01.log\*(Aq);
.Ve
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
The configuration file is a very simple \s-1XML\s0 file.  The root element is
<conf>.  Nested inside are four tags: <tag> <package> <ban> <options>.
.SS "tag"
.IX Subsection "tag"
<tag> has 2 attributes: \fIname\fR and \fItype\fR.  Inside of <tag> is
nested zero to many <tex> tags. Each of these is described below.
.IP "name" 4
.IX Item "name"
The \fIname\fR attributes assigns the other values (\fItype\fR and \fItex\fR)
to an \s-1HTML\s0 tag of a certain name.
.IP "type" 4
.IX Item "type"
The type of a tag basically tells \fIhtml2latex()\fR how to handle it.
Internally, this assigns the tag to a certain handler.
.IP "tex" 4
.IX Item "tex"
When handling a tag, html2latex must know what TeX string to replace
the \s-1HTML\s0 tags with.  This is done with the use of <tex>tex
string</tex>.  Different types require 0,1,or 2 such tags nested
inside of <tag>.  You can think of <tex> tags as arguments to pass to
a \fItype\fR handler.  Internally, that is what it is.
.Sp
Extraneous White space is ignored; do not rely upon it.  \eN is replaced
with newlines.  Everything else is just as you type it.
.SS "tag examples"
.IX Subsection "tag examples"
For a lot of examples, just look at the default configuration file,
html2latex.xml.  We will go over 1 example in detail.  This example is
for the \s-1HTML\s0 <B> tag.
.PP
.Vb 3
\&    <tag name="b" type="command">
\&        <tex>textbf</tex>
\&    </tag>
.Ve
.PP
This text tells \fIhtml2latex()\fR to treat the <B> tag as a TeX command.
It gives it the additional argument of 'textbf'.  \fIhtml2latex()\fR will
call the command_handler('textbf') and the output will be \etextbf{\s-1NESTED\s0 \s-1DATA\s0}.
.SS "package"
.IX Subsection "package"
For each <package>package_name</package> given, package_name is added
to the list printed in the Latex file.  For instance, the lines
.PP
.Vb 3
\&    <package>fullpage</package>
\&    <package>graphicx</package>
\&    <package>url</package>
.Ve
.PP
adds the packages fullpage, graphicx, and url.  The package 'fullpage'
is often recommended.
.SS "head"
.IX Subsection "head"
For each <head>head</head> given, head is added to the list of options
printed in the \edocumentclass command.  For instance, the line
.PP
.Vb 1
\&    <head>twocolumn</head>
.Ve
.PP
creates the command \edocumentclass[10pt,twocolumn]{article}.
.SS "ban"
.IX Subsection "ban"
<ban> will make html2latex ignore a tag.  For instance, the line
.PP
.Vb 1
\&   <ban>code</ban>
.Ve
.PP
makes \fIhtml2latex()\fR ignore <code> even though it has a definition in
the configuration file.  This can be useful to turn on/turn off tags
when trying different configurations.
.SS "options"
.IX Subsection "options"
Inside of <options> are a number of other tags.  Each is described
below in \s-1OPTIONS\s0.  The value inside of a given <\s-1OPTION\s0> </OPTION>
provides a default value that can be overridden with command-line
options.  For instance, <font>10</font> will set the default font size
to 10.
.SH "TYPES"
.IX Header "TYPES"
There are a number of different types of \s-1HTML\s0 tags support by
HTML::Latex.  The list is: command, environment, single, other, table,
image, and ignore.  Each are described below.  \s-1TEX1\s0 and \s-1TEX2\s0 mean the
first and second value given by <tex>.  \s-1NAME\s0 is given by the name
attribute.  \s-1VALUE\s0 is the value nested within an \s-1HTML\s0 tag.
.SS "command"
.IX Subsection "command"
.Vb 4
\& HTML Key:       <NAME>VALUE</NAME>
\& HTML Example:   <B>Foo</B>
\& TeX  Key:       \eTEX1{VALUE}
\& TeX  Example:   \etextbf{Foo}
.Ve
.SS "environment"
.IX Subsection "environment"
.Vb 4
\& HTML Key:       <NAME>VALUE</NAME>
\& HTML Example:   <OL>Foo</OL>
\& TeX  Key:       \ebegin{TEX1} VALUE \eend{TEX1}
\& TeX  Example:   \ebegin{enumerate} Foo \eend{enumerate}
.Ve
.SS "single"
.IX Subsection "single"
.Vb 4
\& HTML Key:       <NAME>VALUE
\& HTML Example:   <LI>Foo
\& TeX  Key:       \eTEX1 VALUE
\& TeX  Example:   \eitem Foo
.Ve
.SS "other"
.IX Subsection "other"
.Vb 4
\& HTML Key:       <NAME>VALUE</NAME>
\& HTML Example:   <DT>Foo
\& TeX  Key:       TEX1 VALUE TEX2
\& TeX  Example:   \eitem[Foo]
.Ve
.SS "kill"
.IX Subsection "kill"
.Vb 4
\& HTML Key:       <NAME>VALUE</NAME>
\& HTML Example:   <SCRIPT>javascript.garbage()</SCRIPT>
\& TeX  Key:       ""
\& TeX  Example:   ""
.Ve
.PP
This is of particular fun because any nested \s-1HTML\s0 tags are also ignored.  Good for removing unwanted javascript.
.SS "table"
.IX Subsection "table"
This should be applied if and only if a tag is of type \s-1TABLE\s0,TR, or \s-1TD\s0.
.SS "image"
.IX Subsection "image"
This should be applied if and only if a tag is of type \s-1IMG\s0.
.SS "ignore"
.IX Subsection "ignore"
Do nothing.  Has the same affect as banning a tag.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fBstore\fR" 4
.IX Item "store"
\&\*(L"store\*(R" is the directory that mirrored files are stored in.  It is
~/.html2latex by default.  In side of this directory are
subdirectories representing the \s-1HOST\s0 in a \s-1URL\s0 and the path from that
\&\s-1HOST\s0.  For instance, if you used
\&\f(CW\*(C`html2latex(http://slashdot.org/path/to/file.html\*(C'\fR, it would store
the file as ~/.html2latex/slashdot.org/path/to/file.html.
.IP "\fBcache\fR" 4
.IX Item "cache"
This will force html2latex to use cached files if possible.  It always
caches anyway, and uses the cached file if the network file has not
changed.  This just forces the use of the local file if available.
.IP "\fBdocument_class\fR" 4
.IX Item "document_class"
Set the documentclass to use.  Any valid latex document class is
valid.  Examples are \fBreport\fR, \fBbook\fR, and \fBarticle\fR.  \fBarticle\fR
is the default.  If an invalid document class is used, the output
latex file will not compile.
.IP "\fBparagraph\fR" 4
.IX Item "paragraph"
True uses HTML-style paragraphs.  They leave a newline between
paragraphs.  False uses TeX-style paragraphs.  They have no newline,
but indent the first line of every paragraph.  Default is true.
.IP "\fBfont\fR" 4
.IX Item "font"
Set the font size.  Can be 10,11, or 12.  Do not try anything else.
html2latex will not check it, but the latex file will not compile (at
least I think not).  Default is 12.
.IP "\fBimage\fR" 4
.IX Item "image"
Set the scale for images in the latex file.  This is useful because
some images in \s-1HTML\s0 or much to big to fit on a page.  Default is 1.0.
Scale can be any non-zero positive floating point number; large
numbers are not recommended.
.IP "\fBborder\fR" 4
.IX Item "border"
True means table borders are on.  False mean they are off.  This is
always overridden by \s-1HTML\s0 attributes.
.IP "\fBmbox\fR" 4
.IX Item "mbox"
\&\fIhtml2latex()\fR will put a tex \embox around all of the tables it creates.
I do not know why, but with a lot of tables (especially nested ones),
the tex and pdf output will work better.  So, if you do not like your
output with tables, try this.  True means on, false means off.
Default is false.
.IP "\fBdebug\fR" 4
.IX Item "debug"
The bigger the number set, the more the debugging info printed.  0
means things relevant to the user.  1 means things that trace some
code.  2 or greater means dumping data structures.
.SH "Extending"
.IX Header "Extending"
Extending HTML::Latex basically means making a new tag work.  Usually,
this would call for writing a new handler.  If a present handler will
suffice, then you can stip to the 3rd step. It's very simple to do so.
There are 3 easy steps:
.SS "Write the function."
.IX Subsection "Write the function."
Write a function (preferably ending in '_handler').  It's input is 1
HTML::Element and several tex strings.  The type of HTML::Element and
the value of the strings is set in the \s-1XML\s0 config file.  Your furtions
responsibilty is to return a TeX string representing the HTML::Element
and all of it's children elements.
.PP
The children are very easy to take care of.  The string representing
the children elements is obtained by calling \f(CW\*(C`texify($html_element)\*(C'\fR.
So, the function really only has to worry about the current
HTML::Element.
.PP
In particular, it must return that comes before and goes after the
string represting the current HTML::Element.  So, if you wanted a
handler that print \eTAG as the TeX for any <\s-1TAG\s0> in \s-1HTML\s0 and a special
\&\s-1TEX\s0 value given in the config file for </TAG>, then the handler would
look like this:
.PP
.Vb 4
\& sub my_handler{
\&     my ($html_element,$tex) = @_;
\&     return \*(Aq\e\*(Aq . $html_element\->tag() . texify($html_element) . $tex;
\& }
.Ve
.PP
In this example, one \s-1TEX\s0 parameter was passed in by the \s-1XML\s0 config
file.  The handler return what comes before the children concatenated
with the texify-ed children texified with what comes after the
children.  See the documentation for HTML::Element for all of the
things you can do with them.
.SS "Assign a tag type to a handler."
.IX Subsection "Assign a tag type to a handler."
Just add an entry to \f(CW%types\fR below.  It should have a type name as a
key and a reference to your handler as a value.  Following our
example, we could add the line:
.PP
.Vb 1
\&    "my_type"     =>    \e&my_handler,
.Ve
.PP
To \f(CW%types\fR.
.SS "Add support in the configuration file."
.IX Subsection "Add support in the configuration file."
The format of the configuration file is in \s-1XML\s0 and can be found above
under \s-1CONFIGURATION\s0 \s-1FILE\s0.  The default \s-1XML\s0 file is at the bottom of
Latex.pm under _\|_DATA_\|_. Basically, for every tag you want to use your
new handler, use <tag> as follows:
.PP
.Vb 3
\& <tag name="TAG_NAME" type="my_type">
\&     <tex>TEX_PARAMATER</tex>
\& </tap>
.Ve
.PP
\&\s-1TAG_NAME\s0 is, of course, the tag name.  \*(L"my_type\*(R" is the name of the
type you assigned your handler to.  \s-1TEX_PARAMATER\s0 is the value that
gets placed under \f(CW$tex\fR in the example handler.
.PP
That's it.  Now HTML::Latex should obey the new handler and behave
correctly.
.SH "NOTES"
.IX Header "NOTES"
In you call \fIhtml2latex()\fR on several URLs any filename given after a
\&\s-1URL\s0 will continue to use the latest \s-1HOST\s0 given.  Also, files default
to index.html, regardless of what the server thinks.  So, if you use:
.PP
.Vb 4
\& html2latex(http://slashdot.org)
\& html2latex(foo.html)
\& html2latex(http://linuxtoday.net)
\& html2latex(bar.html)
.Ve
.PP
\&\fIhtml2latex()\fR will try to grab http://slashdot.org/index.html,
http://slashdot.org/foo.html, http://linuxtoday.net/index.html, and
http://linuxtoday.net/bar.html
.SH "BUGS"
.IX Header "BUGS"
* Anything between <\s-1TABLE\s0> and <\s-1TR\s0> and <\s-1TD\s0> is ignored.  I do not
.PP
* Anything between <\s-1OL\s0> or <\s-1UL\s0> and <\s-1LI\s0> will not be ignored, but will
  really mess Latex up.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 219:" 4
.IX Item "Around line 219:"
You forgot a '=back' before '=head2'
.IP "Around line 233:" 4
.IX Item "Around line 233:"
=back without =over
.IP "Around line 395:" 4
.IX Item "Around line 395:"
You forgot a '=back' before '=head1'
